{
	"info": {
		"_postman_id": "414a24ec-a41c-4b46-a9d6-d5d30465ec97",
		"name": "dvd_rental",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7375862"
	},
	"item": [
		{
			"name": "languages",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"language_id\");",
									"    pm.expect(pm.response.json().data.language_id).to.exist;",
									"    pm.globals.set(\"languageId\", pm.response.json().data.language_id);",
									"    pm.globals.set(\"languageName\", pm.response.json().data.name);",
									"});",
									"",
									"pm.test(\"Response contains the fields language_id, name, and last_update with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let languageName = generateRandomString(6)",
									"pm.globals.set(\"languageName\", languageName);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{languageName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/language",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"language"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches expectations\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"data\");",
									"    pm.expect(pm.response.text()).to.include(\"errors\");",
									"});",
									"",
									"pm.test(\"Response is an array containing objects with language_id, name, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((language) => {",
									"        pm.expect(language).to.have.property('language_id').that.is.a('number');",
									"        pm.expect(language).to.have.property('name').that.is.a('string');",
									"        pm.expect(language).to.have.property('last_update').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let languageName1 = generateRandomString(6)",
									"let languageName2 = generateRandomString(6)",
									"let languageName3 = generateRandomString(21)",
									"pm.globals.set(\"languageName1\", languageName1);",
									"pm.globals.set(\"languageName2\", languageName2);",
									"pm.globals.set(\"languageName3\", languageName3);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"{{languageName1}}\"\n    },\n    {\n        \"name\": \"{{languageName2}}\"\n    },\n    {\n        \"name\": \"{{languageName3}}\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/languages",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with language_id, name, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((language) => {",
									"    pm.expect(language).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(language).to.have.property('name').that.is.a('string');",
									"    pm.expect(language).to.have.property('last_update').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/languages?page=1&limit=10",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"languages"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /languages filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with language_id, name, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((language) => {",
									"    pm.expect(language).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(language).to.have.property('name').that.is.a('string');",
									"    pm.expect(language).to.have.property('last_update').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/languages?page=1&limit=10&name={{languageName}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"languages"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "name",
									"value": "{{languageName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /language/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"language_id\");",
									"    pm.expect(pm.response.json().data.language_id).to.exist;",
									"    pm.globals.set(\"languageId\", pm.response.json().data.language_id);",
									"});",
									"",
									"pm.test(\"Response contains the fields language_id, name, and last_update with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/language/{{languageId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"language",
								"{{languageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /language/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let updatedLanguageName = generateRandomString(6)",
									"pm.globals.set(\"updatedLanguageName\", updatedLanguageName);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"language_id\");",
									"    pm.expect(pm.response.json().data.language_id).to.exist;",
									"    pm.globals.set(\"languageId\", pm.response.json().data.language_id);",
									"});",
									"",
									"pm.test(\"Response contains the fields language_id, name, and last_update with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{updatedLanguageName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/language/{{languageId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"language",
								"{{languageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /language/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"language_id\");",
									"    pm.expect(pm.response.json().deleted.language_id).to.exist;",
									"    pm.globals.set(\"languageId\", pm.response.json().deleted.language_id);",
									"});",
									"",
									"pm.test(\"Response contains the fields language_id, name, and last_update with correct data types\", function () {",
									"    var responseData = pm.response.json().deleted;",
									"",
									"    pm.expect(responseData).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/language/{{languageId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"language",
								"{{languageId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "internal/language"
		},
		{
			"name": "actors",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /actor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let firstName = generateRandomString(6)",
									"let lastName = generateRandomString(8)",
									"pm.globals.set(\"firstName\", firstName);",
									"pm.globals.set(\"lastName\", lastName);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"actor_id\");",
									"    pm.expect(pm.response.json().data.actor_id).to.exist;",
									"    pm.globals.set(\"actorId\", pm.response.json().data.actor_id);",
									"});",
									"",
									"pm.test(\"Response contains the fields actor_id, first_name, and last_name with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('actor_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('first_name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_name').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"{{firstName}}\",\n    \"last_name\": \"{{lastName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actor",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actor"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /actors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let firstNameActor1 = generateRandomString(6)",
									"let lastNameActor1 = generateRandomString(8)",
									"let firstNameActor2 = generateRandomString(6)",
									"let lastNameActor2 = generateRandomString(8)",
									"let lastNameActor3 = generateRandomString(8)",
									"pm.globals.set(\"firstNameActor1\", firstNameActor1);",
									"pm.globals.set(\"lastNameActor1\", lastNameActor1);",
									"pm.globals.set(\"firstNameActor2\", firstNameActor2);",
									"pm.globals.set(\"lastNameActor2\", lastNameActor2);",
									"pm.globals.set(\"lastNameActor3\", lastNameActor2);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches expectations\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"data\");",
									"    pm.expect(pm.response.text()).to.include(\"errors\");",
									"});",
									"",
									"pm.test(\"Response is an array containing objects with actor_id, first_name, and last_name\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((actor) => {",
									"        pm.expect(actor).to.have.property('actor_id');",
									"        pm.expect(actor).to.have.property('first_name');",
									"        pm.expect(actor).to.have.property('last_name');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"first_name\": \"{{firstNameActor1}}\",\n        \"last_name\": \"{{lastNameActor1}}\"\n    },\n    {\n        \"first_name\": \"{{firstNameActor2}}\",\n        \"last_name\": \"{{lastNameActor2}}\"\n    },\n    {\n        \"last_name\": \"{{lastNameActor3}}\"\n    }\n]\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actors",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with actor_id, first_name, and last_name\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((actor) => {",
									"        pm.expect(actor).to.have.property('actor_id');",
									"        pm.expect(actor).to.have.property('first_name');",
									"        pm.expect(actor).to.have.property('last_name');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actors?page=1&limit=10",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actors"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /actor/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains the fields actor_id, first_name, and last_name with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('actor_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('first_name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_name').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actor/{{actorId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actor",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /actor/:id/films",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains the fields actor_id, first_name, and last_name with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('actor_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('first_name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_name').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actor/{{actorId}}/films",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actor",
								"{{actorId}}",
								"films"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /actor/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains the fields actor_id, first_name, and last_name with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('actor_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('first_name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_name').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let updatedFirstName = generateRandomString(6)",
									"let updatedLastName = generateRandomString(8)",
									"pm.globals.set(\"updatedFirstName\", updatedFirstName);",
									"pm.globals.set(\"updatedLastName\", updatedLastName);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"{{updatedFirstName}}\",\n    \"last_name\": \"{{updatedLastName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actor/{{actorId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actor",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /actor/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct body\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.deleted.actor_id).to.be.a(\"number\");",
									"    pm.expect(jsonData.deleted.first_name).to.be.a(\"string\");",
									"    pm.expect(jsonData.deleted.last_name).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/actor/{{actorId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actor",
								"{{actorId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "internal/actor"
		},
		{
			"name": "films",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"    ",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject = generateRandomFilm()",
									"pm.globals.set(\"filmObject\", JSON.stringify(filmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Film object structure is valid\", function () {",
									"    pm.expect(responseJSON.data).has.property('film_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('title').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('description').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('release_year').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('language_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_duration').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_rate').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('length').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('replacement_cost').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rating').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('last_update').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('special_features').that.is.an('array');",
									"    pm.expect(responseJSON.data).has.property('fulltext').that.is.a('string');",
									"    pm.globals.set(\"filmId\", pm.response.json().data.film_id);",
									"    pm.globals.set(\"filmTitle\", pm.response.json().data.title);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{filmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /films",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject1 = generateRandomFilm()",
									"filmObject2 = generateRandomFilm()",
									"filmObject3 = { foo: 1 }",
									"var combinedFilmObject = []",
									"combinedFilmObject.push(filmObject1, filmObject2, filmObject3)",
									"pm.globals.set(\"combinedFilmObject\", JSON.stringify(combinedFilmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('errors');",
									"});",
									"",
									"pm.test(\"Response should be valid and contain required fields\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('array');",
									"    jsonData.data.forEach(film => {",
									"        pm.expect(film).to.have.property('film_id').that.is.a('number');",
									"        pm.expect(film).to.have.property('title').that.is.a('string');",
									"        pm.expect(film).to.have.property('description').that.is.a('string');",
									"        pm.expect(film).to.have.property('release_year').that.is.a('number');",
									"        pm.expect(film).to.have.property('language_id').that.is.a('number');",
									"        pm.expect(film).to.have.property('rental_duration').that.is.a('number');",
									"        pm.expect(film).to.have.property('rental_rate').that.is.a('number');",
									"        pm.expect(film).to.have.property('length').that.is.a('number');",
									"        pm.expect(film).to.have.property('replacement_cost').that.is.a('number');",
									"        pm.expect(film).to.have.property('rating').that.is.a('string');",
									"        pm.expect(film).to.have.property('last_update').that.is.a('string');",
									"        pm.expect(film).to.have.property('special_features').that.is.an('array');",
									"        pm.expect(film).to.have.property('fulltext').that.is.a('string');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{combinedFilmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/films",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film/:id discount",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomFloat(min = 1, max = 99) {",
									"    return Math.random() * (max - min) + min;",
									"}",
									"",
									"filmDiscount = getRandomFloat()",
									"pm.globals.set(\"filmDiscount\", JSON.stringify(filmDiscount));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields for a single film\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('object');",
									"    let film = jsonData.data;",
									"    pm.expect(film).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(film).to.have.property('title').that.is.a('string');",
									"    pm.expect(film).to.have.property('description').that.is.a('string');",
									"    pm.expect(film).to.have.property('release_year').that.is.a('number');",
									"    pm.expect(film).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(film).to.have.property('rental_duration').that.is.a('number');",
									"    pm.expect(film).to.have.property('rental_rate').that.is.a('number');",
									"    pm.expect(film).to.have.property('length').that.is.a('number');",
									"    pm.expect(film).to.have.property('replacement_cost').that.is.a('number');",
									"    pm.expect(film).to.have.property('rating').that.is.a('string');",
									"    pm.expect(film).to.have.property('last_update').that.is.a('string');",
									"    pm.expect(film).to.have.property('special_features').that.is.an('array');",
									"    pm.expect(film).to.have.property('fulltext').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"discount\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film/{{filmId}}/discount",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film",
								"{{filmId}}",
								"discount"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /films",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('array');",
									"    jsonData.data.forEach(film => {",
									"        pm.expect(film).to.have.property('film_id').that.is.a('number');",
									"        pm.expect(film).to.have.property('title').that.is.a('string');",
									"        pm.expect(film).to.have.property('description').that.is.a('string');",
									"        pm.expect(film).to.have.property('release_year').that.is.a('number');",
									"        pm.expect(film).to.have.property('language_id').that.is.a('number');",
									"        pm.expect(film).to.have.property('rental_duration').that.is.a('number');",
									"        pm.expect(film).to.have.property('rental_rate').that.is.a('number');",
									"        pm.expect(film).to.have.property('length').that.is.a('number');",
									"        pm.expect(film).to.have.property('replacement_cost').that.is.a('number');",
									"        pm.expect(film).to.have.property('rating').that.is.a('string');",
									"        pm.expect(film).to.have.property('last_update').that.is.a('string');",
									"        pm.expect(film).to.have.property('special_features').that.is.an('array');",
									"        pm.expect(film).to.have.property('fulltext').that.is.a('string');",
									"    });",
									"    pm.expect(jsonData).to.have.property('limit').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('page').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('total').that.is.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/films?page=1&limit=10",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"films"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /films filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('array');",
									"    jsonData.data.forEach(film => {",
									"        pm.expect(film).to.have.property('film_id').that.is.a('number');",
									"        pm.expect(film).to.have.property('title').that.is.a('string');",
									"        pm.expect(film).to.have.property('description').that.is.a('string');",
									"        pm.expect(film).to.have.property('release_year').that.is.a('number');",
									"        pm.expect(film).to.have.property('language_id').that.is.a('number');",
									"        pm.expect(film).to.have.property('rental_duration').that.is.a('number');",
									"        pm.expect(film).to.have.property('rental_rate').that.is.a('number');",
									"        pm.expect(film).to.have.property('length').that.is.a('number');",
									"        pm.expect(film).to.have.property('replacement_cost').that.is.a('number');",
									"        pm.expect(film).to.have.property('rating').that.is.a('string');",
									"        pm.expect(film).to.have.property('last_update').that.is.a('string');",
									"        pm.expect(film).to.have.property('special_features').that.is.an('array');",
									"        pm.expect(film).to.have.property('fulltext').that.is.a('string');",
									"    });",
									"    pm.expect(jsonData).to.have.property('limit').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('page').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('total').that.is.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/films?page=1&limit=10&title={{filmTitle}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"films"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "title",
									"value": "{{filmTitle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /film/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields for a single film\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('object');",
									"    let film = jsonData.data;",
									"    pm.expect(film).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(film).to.have.property('title').that.is.a('string');",
									"    pm.expect(film).to.have.property('description').that.is.a('string');",
									"    pm.expect(film).to.have.property('release_year').that.is.a('number');",
									"    pm.expect(film).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(film).to.have.property('rental_duration').that.is.a('number');",
									"    pm.expect(film).to.have.property('rental_rate').that.is.a('number');",
									"    pm.expect(film).to.have.property('length').that.is.a('number');",
									"    pm.expect(film).to.have.property('replacement_cost').that.is.a('number');",
									"    pm.expect(film).to.have.property('rating').that.is.a('string');",
									"    pm.expect(film).to.have.property('last_update').that.is.a('string');",
									"    pm.expect(film).to.have.property('special_features').that.is.an('array');",
									"    pm.expect(film).to.have.property('fulltext').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film/{{filmId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film",
								"{{filmId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /film/:id/actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields for a single film\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('object');",
									"    let film = jsonData.data;",
									"    pm.expect(film).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(film).to.have.property('title').that.is.a('string');",
									"    pm.expect(film).to.have.property('description').that.is.a('string');",
									"    pm.expect(film).to.have.property('release_year').that.is.a('number');",
									"    pm.expect(film).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(film).to.have.property('rental_duration').that.is.a('number');",
									"    pm.expect(film).to.have.property('rental_rate').that.is.a('number');",
									"    pm.expect(film).to.have.property('length').that.is.a('number');",
									"    pm.expect(film).to.have.property('replacement_cost').that.is.a('number');",
									"    pm.expect(film).to.have.property('rating').that.is.a('string');",
									"    pm.expect(film).to.have.property('last_update').that.is.a('string');",
									"    pm.expect(film).to.have.property('special_features').that.is.an('array');",
									"    pm.expect(film).to.have.property('fulltext').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film/{{filmId}}/actors",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film",
								"{{filmId}}",
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /film/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"    ",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject = generateRandomFilm()",
									"pm.globals.set(\"updatedFilmObject\", JSON.stringify(filmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Film object structure is valid\", function () {",
									"    pm.expect(responseJSON.data).has.property('film_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('title').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('description').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('release_year').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('language_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_duration').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_rate').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('length').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('replacement_cost').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rating').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('last_update').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('special_features').that.is.an('array');",
									"    pm.expect(responseJSON.data).has.property('fulltext').that.is.a('string');",
									"    pm.globals.set(\"filmId\", pm.response.json().data.film_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{updatedFilmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film/{{filmId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film",
								"{{filmId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /film/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct body\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.deleted.film_id).to.be.a(\"number\");",
									"    pm.expect(jsonData.deleted.title).to.be.a(\"string\");",
									"    pm.expect(jsonData.deleted.description).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film/{{filmId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film",
								"{{filmId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "internal/film"
		},
		{
			"name": "categories",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateCategory(id = null) {",
									"    return {",
									"        name: `Category_${Math.random().toString(36).substring(7)}`,",
									"        last_update: new Date().toISOString(),",
									"        deleted_at: null",
									"    };",
									"}",
									"",
									"categoryObject = generateCategory()",
									"pm.globals.set(\"categoryObject\", JSON.stringify(categoryObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check status\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check response data\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.have.property(\"category_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"name\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"",
									"    pm.globals.set(\"categoryId\", pm.response.json().data.category_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{categoryObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/category",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('array');",
									"    jsonData.data.forEach(category => {",
									"        pm.expect(category).to.have.property('category_id').that.is.a('number');",
									"        pm.expect(category).to.have.property('name').that.is.a('string');",
									"        pm.expect(category).to.have.property('last_update').that.is.a('string');",
									"    });",
									"    ",
									"    pm.expect(jsonData).to.have.property('limit').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('page').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('total').that.is.a('number');    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/categories",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /category/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields for a single category\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('object');",
									"    let category = jsonData.data;",
									"    pm.expect(category).to.have.property('category_id').that.is.a('number');",
									"    pm.expect(category).to.have.property('name').that.is.a('string');",
									"    pm.expect(category).to.have.property('last_update').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/category/{{categoryId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"category",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /category/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomCategory() {",
									"    return {",
									"        name: `Name ${Math.floor(Math.random() * 1000)}`,",
									"    };",
									"}",
									"",
									"categoryObject = generateRandomCategory()",
									"pm.globals.set(\"updatedCategoryObject\", JSON.stringify(categoryObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response data\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.have.property(\"category_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"name\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"",
									"    pm.globals.set(\"categoryId\", pm.response.json().data.category_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{updatedCategoryObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/category/{{categoryId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"category",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /category/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct body\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.deleted.category_id).to.be.a(\"number\");",
									"    pm.expect(jsonData.deleted.name).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/category/{{categoryId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"category",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "internal/category"
		},
		{
			"name": "film_actors",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /actor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let firstName = generateRandomString(6)",
									"let lastName = generateRandomString(8)",
									"pm.globals.set(\"firstName\", firstName);",
									"pm.globals.set(\"lastName\", lastName);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"actor_id\");",
									"    pm.expect(pm.response.json().data.actor_id).to.exist;",
									"    pm.globals.set(\"film_actors_actorId\", pm.response.json().data.actor_id);",
									"});",
									"",
									"pm.test(\"Response contains the fields actor_id, first_name, and last_name with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('actor_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('first_name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_name').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"{{firstName}}\",\n    \"last_name\": \"{{lastName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actor",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actor"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"    ",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject = generateRandomFilm()",
									"pm.globals.set(\"film_actors_filmObject\", JSON.stringify(filmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Film object structure is valid\", function () {",
									"    pm.expect(responseJSON.data).has.property('film_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('title').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('description').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('release_year').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('language_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_duration').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_rate').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('length').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('replacement_cost').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rating').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('last_update').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('special_features').that.is.an('array');",
									"    pm.expect(responseJSON.data).has.property('fulltext').that.is.a('string');",
									"    pm.globals.set(\"film_actors_filmId\", pm.response.json().data.film_id);",
									"    pm.globals.set(\"film_actors_filmTitle\", pm.response.json().data.title);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{film_actors_filmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film-actor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'data' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Fields inside 'data' are valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"actor_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"film_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actor_id\": {{film_actors_actorId}},\n    \"film_id\": {{film_actors_filmId}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film-actor",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-actor"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /film-actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains 'data' array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
									"});",
									"",
									"pm.test(\"'data' array is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Each object in 'data' array has valid fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.forEach(item => {",
									"        pm.expect(item).to.have.property(\"actor_id\").that.is.a(\"number\");",
									"        pm.expect(item).to.have.property(\"film_id\").that.is.a(\"number\");",
									"        pm.expect(item).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    });",
									"});",
									"",
									"pm.test(\"Response contains 'limit', 'page', and 'total' fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"limit\").that.is.a(\"number\");",
									"    pm.expect(jsonData).to.have.property(\"page\").that.is.a(\"number\");",
									"    pm.expect(jsonData).to.have.property(\"total\").that.is.a(\"number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film-actors",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /film_actor/:actor_id/:film_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains 'data' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Fields inside 'data' are valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"actor_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"film_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film_actor/:actor_id/:film_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film_actor",
								":actor_id",
								":film_id"
							],
							"variable": [
								{
									"key": "actor_id",
									"value": "{{film_actors_actorId}}"
								},
								{
									"key": "film_id",
									"value": "{{film_actors_filmId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"    ",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject = generateRandomFilm()",
									"pm.globals.set(\"filmObject\", JSON.stringify(filmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Film object structure is valid\", function () {",
									"    pm.expect(responseJSON.data).has.property('film_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('title').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('description').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('release_year').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('language_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_duration').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_rate').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('length').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('replacement_cost').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rating').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('last_update').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('special_features').that.is.an('array');",
									"    pm.expect(responseJSON.data).has.property('fulltext').that.is.a('string');",
									"    pm.globals.set(\"film_actors_updatedFilmId\", pm.response.json().data.film_id);",
									"    pm.globals.set(\"film_actors_updatedFilmTitle\", pm.response.json().data.title);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{filmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /film_actor/:actor_id/:film_id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actor_id\": {{film_actors_actorId}},\n    \"film_id\": {{film_actors_updatedFilmId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film_actor/:actor_id/:film_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film_actor",
								":actor_id",
								":film_id"
							],
							"variable": [
								{
									"key": "actor_id",
									"value": "{{film_actors_actorId}}"
								},
								{
									"key": "film_id",
									"value": "{{film_actors_filmId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /film_actor/:actor_id/:film_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response should have a 'deleted' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"deleted\");",
									"});",
									"",
									"pm.test(\"'deleted' object should contain expected properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.deleted).to.have.property(\"actor_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.deleted).to.have.property(\"film_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.deleted).to.have.property(\"last_update\").that.is.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film_actor/:actor_id/:film_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film_actor",
								":actor_id",
								":film_id"
							],
							"variable": [
								{
									"key": "actor_id",
									"value": "{{film_actors_actorId}}"
								},
								{
									"key": "film_id",
									"value": "{{film_actors_updatedFilmId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "internal/film_actor"
		},
		{
			"name": "film_category",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateCategory(id = null) {",
									"    return {",
									"        category_id: id ?? Math.floor(Math.random() * 1000),",
									"        name: `Category_${Math.random().toString(36).substring(7)}`,",
									"        last_update: new Date().toISOString(),",
									"        deleted_at: null",
									"    };",
									"}",
									"",
									"categoryObject = generateCategory()",
									"pm.globals.set(\"film_category_categoryObject\", JSON.stringify(categoryObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check status\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check response data\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.have.property(\"category_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"name\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"",
									"    pm.globals.set(\"film_category_categoryId\", pm.response.json().data.category_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{film_category_categoryObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/category",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"    ",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject = generateRandomFilm()",
									"pm.globals.set(\"film_category_filmObject\", JSON.stringify(filmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Film object structure is valid\", function () {",
									"    pm.expect(responseJSON.data).has.property('film_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('title').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('description').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('release_year').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('language_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_duration').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_rate').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('length').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('replacement_cost').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rating').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('last_update').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('special_features').that.is.an('array');",
									"    pm.expect(responseJSON.data).has.property('fulltext').that.is.a('string');",
									"    pm.globals.set(\"film_category_filmId\", pm.response.json().data.film_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{film_category_filmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film-category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"filmId = pm.globals.get(\"film_category_filmId\");",
									"categoryId = pm.globals.get(\"film_category_categoryId\");",
									"",
									"filmCategoryObject = generateFilmCategory(filmId, categoryId)",
									"",
									"function generateFilmCategory(filmId, categoryId) {",
									"    return {",
									"        film_id: filmId,",
									"        category_id: categoryId,",
									"        last_update: new Date().toISOString(),",
									"        deleted_at: null",
									"    };",
									"}",
									"",
									"pm.globals.set(\"filmCategoryObject\", JSON.stringify(filmCategoryObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(jsonData.data).to.have.property('category_id').that.is.a('number');",
									"    pm.expect(jsonData.data).to.have.property('last_update').that.is.a('string');",
									"    pm.globals.set(\"filmCategory\", pm.response.json().data.category_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{filmCategoryObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film-category",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-category"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /film-categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    jsonData.data.forEach(film_category => {",
									"        pm.expect(film_category).to.have.property('film_id').that.is.a('number');",
									"        pm.expect(film_category).to.have.property('category_id').that.is.a('number');",
									"        pm.expect(film_category).to.have.property('last_update').that.is.a('string');",
									"    })",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film-categories?order=desc&field=category_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-categories"
							],
							"query": [
								{
									"key": "order",
									"value": "desc"
								},
								{
									"key": "field",
									"value": "category_id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET film-category/:film_id/:category_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(jsonData.data).to.have.property('category_id').that.is.a('number');",
									"    pm.expect(jsonData.data).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film-category/:film_id/:category_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-category",
								":film_id",
								":category_id"
							],
							"variable": [
								{
									"key": "film_id",
									"value": "{{film_category_filmId}}"
								},
								{
									"key": "category_id",
									"value": "{{filmCategory}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT film-category/:film_id/:category_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(jsonData.data).to.have.property('category_id').that.is.a('number');",
									"    pm.expect(jsonData.data).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"filmId = pm.globals.get(\"film_category_filmId\");",
									"categoryId = pm.globals.get(\"film_category_categoryId\");",
									"",
									"filmCategoryObject = generateFilmCategory(filmId, categoryId)",
									"",
									"function generateFilmCategory(filmId, categoryId) {",
									"    return {",
									"        film_id: filmId,",
									"        category_id: categoryId,",
									"        last_update: new Date().toISOString(),",
									"        deleted_at: null",
									"    };",
									"}",
									"",
									"const updatedFilmCategoryObject = generateFilmCategory(filmId, categoryId);",
									"pm.globals.set(\"updatedFilmCategoryObject\", JSON.stringify(updatedFilmCategoryObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{updatedFilmCategoryObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film-category/:film_id/:category_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-category",
								":film_id",
								":category_id"
							],
							"variable": [
								{
									"key": "film_id",
									"value": "{{film_category_filmId}}"
								},
								{
									"key": "category_id",
									"value": "{{filmCategory}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE film-category/:film_id/:category_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('deleted');",
									"    pm.expect(jsonData.deleted).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(jsonData.deleted).to.have.property('category_id').that.is.a('number');",
									"    pm.expect(jsonData.deleted).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film-category/:film_id/:category_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-category",
								":film_id",
								":category_id"
							],
							"variable": [
								{
									"key": "film_id",
									"value": "{{film_category_filmId}}"
								},
								{
									"key": "category_id",
									"value": "{{filmCategory}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "internal/film_category"
		},
		{
			"name": "country",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /country",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let countryName = generateRandomString(50)",
									"pm.globals.set(\"countryName\", countryName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"country_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"country\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"countryId\", pm.response.json().data.country_id);",
									"    pm.globals.set(\"country\", pm.response.json().data.country);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"{{countryName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/country",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /countries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with country_id, country, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((country) => {",
									"        pm.expect(country).to.have.property('country_id').that.is.a('number');",
									"        pm.expect(country).to.have.property('country').that.is.a('string');",
									"        pm.expect(country).to.have.property('last_update').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/countries",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"countries"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /country/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with country_id, country, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('country_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('country').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/country/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{countryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /country/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let updatedCountryName = generateRandomString(50)",
									"pm.globals.set(\"updatedCountryName\", updatedCountryName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with country_id, country, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('country_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('country').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"{{updatedCountryName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/country/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{countryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /country/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with country_id, country, and last_update\", function () {",
									"    var responseData = pm.response.json().deleted;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('country_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('country').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/country/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{countryId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "internal/country"
		},
		{
			"name": "city",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /country",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let countryName = generateRandomString(50)",
									"pm.globals.set(\"city_countryName\", countryName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"country_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"country\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"city_countryId\", pm.response.json().data.country_id);",
									"    pm.globals.set(\"city_country\", pm.response.json().data.country);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"{{city_countryName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/country",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /city",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let cityName = generateRandomString(50)",
									"pm.globals.set(\"cityName\", cityName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"city\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"cityId\", pm.response.json().data.city_id);",
									"    pm.globals.set(\"city\", pm.response.json().data.city);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"city\": \"{{cityName}}\",\n    \"country_id\": {{city_countryId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/city",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"city"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /cities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with city_id, city, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((city) => {",
									"        pm.expect(city).to.have.property('city_id').that.is.a('number');",
									"        pm.expect(city).to.have.property('city').that.is.a('string');",
									"        pm.expect(city).to.have.property('last_update').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/cities",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"cities"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /city/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with city_id, city, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('city_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('city').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/city/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"city",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{cityId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /city/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let updatedCityName = generateRandomString(50)",
									"pm.globals.set(\"updatedCityName\", updatedCityName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array containing objects with city_id, city, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('city_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('city').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"city\": \"{{updatedCityName}}\",\n    \"country_id\": {{city_countryId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/city/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"city",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{cityId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /city/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an object containing objects with city_id, city, and last_update\", function () {",
									"    var responseData = pm.response.json().deleted;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('city_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('city').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/city/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"city",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{cityId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "internal/city"
		},
		{
			"name": "address",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /country",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let countryName = generateRandomString(50)",
									"pm.globals.set(\"address_countryName\", countryName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"country_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"country\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"address_countryId\", pm.response.json().data.country_id);",
									"    pm.globals.set(\"address_country\", pm.response.json().data.country);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"{{address_countryName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/country",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /city",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let cityName = generateRandomString(50)",
									"pm.globals.set(\"address_cityName\", cityName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"city\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"address_cityId\", pm.response.json().data.city_id);",
									"    pm.globals.set(\"address_city\", pm.response.json().data.city);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"city\": \"{{address_cityName}}\",\n    \"country_id\": {{address_countryId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/city",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"city"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Validate 'data' structure\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"address\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"address2\").that.is.a(\"string\"); // Can be empty",
									"    pm.expect(jsonData.data).to.have.property(\"district\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"postal_code\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"phone\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"address_id\", pm.response.json().data.address_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    let result = '';",
									"    for (let i = 0; i < length; i++) {",
									"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
									"    }",
									"    return result;",
									"}",
									"",
									"const addressObject = generateRandomString(50);",
									"const addressObject2 = generateRandomString(50);",
									"const addressDistrictObject = generateRandomString(20);",
									"const addressPostalCodeObject = generateRandomString(10);",
									"const addressPhoneObject = generateRandomString(10);",
									"pm.globals.set(\"addressObject\", JSON.stringify(addressObject));",
									"pm.globals.set(\"addressObject2\", JSON.stringify(addressObject2));",
									"pm.globals.set(\"addressDistrictObject\", JSON.stringify(addressDistrictObject));",
									"pm.globals.set(\"addressPostalCodeObject\", JSON.stringify(addressPostalCodeObject));",
									"pm.globals.set(\"addressPhoneObject\", JSON.stringify(addressPhoneObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": {{addressObject}},\n    \"address2\": {{addressObject2}},\n    \"district\": {{addressDistrictObject}},\n    \"city_id\": {{address_cityId}},\n    \"postal_code\": {{addressPostalCodeObject}},\n    \"phone\": {{addressPhoneObject}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/address",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /addresses",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with address_id, address, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((address) => {",
									"        pm.expect(address).to.have.property('address_id').that.is.a('number');",
									"        pm.expect(address).to.have.property('address').that.is.a('string');",
									"        pm.expect(address).to.have.property('address2').that.is.a('string');",
									"        pm.expect(address).to.have.property('district').that.is.a('string');",
									"        pm.expect(address).to.have.property('city_id').that.is.a('number');",
									"        pm.expect(address).to.have.property('postal_code').that.is.a('string');",
									"        pm.expect(address).to.have.property('phone').that.is.a('string');",
									"        pm.expect(address).to.have.property('last_update').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/addresses",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"addresses"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /address/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with address_id, address, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('address_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('address').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/address/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"address",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{address_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Validate 'data' structure\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"address\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"address2\").that.is.a(\"string\"); // Can be empty",
									"    pm.expect(jsonData.data).to.have.property(\"district\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"postal_code\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"phone\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"address_id\", pm.response.json().data.address_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    let result = '';",
									"    for (let i = 0; i < length; i++) {",
									"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
									"    }",
									"    return result;",
									"}",
									"",
									"const addressObject = generateRandomString(50);",
									"const addressObject2 = generateRandomString(50);",
									"const addressDistrictObject = generateRandomString(20);",
									"const addressPostalCodeObject = generateRandomString(10);",
									"const addressPhoneObject = generateRandomString(10);",
									"pm.globals.set(\"addressObject\", JSON.stringify(addressObject));",
									"pm.globals.set(\"addressObject2\", JSON.stringify(addressObject2));",
									"pm.globals.set(\"addressDistrictObject\", JSON.stringify(addressDistrictObject));",
									"pm.globals.set(\"addressPostalCodeObject\", JSON.stringify(addressPostalCodeObject));",
									"pm.globals.set(\"addressPhoneObject\", JSON.stringify(addressPhoneObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": {{addressObject}},\n    \"address2\": {{addressObject2}},\n    \"district\": {{addressDistrictObject}},\n    \"city_id\": {{address_cityId}},\n    \"postal_code\": {{addressPostalCodeObject}},\n    \"phone\": {{addressPhoneObject}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/address/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"address",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{address_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /address/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with address_id, address, and last_update\", function () {",
									"    var responseData = pm.response.json().deleted;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('address_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('address').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/address/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"address",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{address_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "internal/address"
		},
		{
			"name": "store",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /country",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let countryName = generateRandomString(50)",
									"pm.globals.set(\"store_countryName\", countryName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"country_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"country\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"store_countryId\", pm.response.json().data.country_id);",
									"    pm.globals.set(\"store_country\", pm.response.json().data.country);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"{{store_countryName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/country",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /city",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let cityName = generateRandomString(50)",
									"pm.globals.set(\"store_cityName\", cityName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"city\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"store_cityId\", pm.response.json().data.city_id);",
									"    pm.globals.set(\"store_city\", pm.response.json().data.city);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"city\": \"{{store_cityName}}\",\n    \"country_id\": {{store_countryId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/city",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"city"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Validate 'data' structure\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"address\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"address2\").that.is.a(\"string\"); // Can be empty",
									"    pm.expect(jsonData.data).to.have.property(\"district\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"postal_code\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"phone\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"store_addressId\", pm.response.json().data.address_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    let result = '';",
									"    for (let i = 0; i < length; i++) {",
									"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
									"    }",
									"    return result;",
									"}",
									"",
									"const addressObject = generateRandomString(50);",
									"const addressObject2 = generateRandomString(50);",
									"const addressDistrictObject = generateRandomString(20);",
									"const addressPostalCodeObject = generateRandomString(10);",
									"const addressPhoneObject = generateRandomString(10);",
									"pm.globals.set(\"store_addressObject\", JSON.stringify(addressObject));",
									"pm.globals.set(\"store_addressObject2\", JSON.stringify(addressObject2));",
									"pm.globals.set(\"store_addressDistrictObject\", JSON.stringify(addressDistrictObject));",
									"pm.globals.set(\"store_addressPostalCodeObject\", JSON.stringify(addressPostalCodeObject));",
									"pm.globals.set(\"store_addressPhoneObject\", JSON.stringify(addressPhoneObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": {{store_addressObject}},\n    \"address2\": {{store_addressObject2}},\n    \"district\": {{store_addressDistrictObject}},\n    \"city_id\": {{store_cityId}},\n    \"postal_code\": {{store_addressPostalCodeObject}},\n    \"phone\": {{store_addressPhoneObject}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/address",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /store",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.be.an(\"object\");",
									"",
									"    pm.expect(jsonData.data).to.have.property(\"store_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"manager_staff_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"",
									"    pm.globals.set(\"store_id\", pm.response.json().data.store_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address_id\": {{store_addressId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/store",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"store"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /stores",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with store_id, store, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((store) => {",
									"        pm.expect(store).to.have.property('store_id').that.is.a('number');",
									"        pm.expect(store).to.have.property('manager_staff_id').that.is.a('number');",
									"        pm.expect(store).to.have.property('address_id').that.is.a('number');",
									"        pm.expect(store).to.have.property('last_update').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/stores",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"stores"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /store/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with store_id, store, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('store_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('manager_staff_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('address_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/store/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"store",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{store_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Validate 'data' structure\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"address\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"address2\").that.is.a(\"string\"); // Can be empty",
									"    pm.expect(jsonData.data).to.have.property(\"district\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"postal_code\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"phone\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"address_id\", pm.response.json().data.address_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    let result = '';",
									"    for (let i = 0; i < length; i++) {",
									"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
									"    }",
									"    return result;",
									"}",
									"",
									"const addressObject = generateRandomString(50);",
									"const addressObject2 = generateRandomString(50);",
									"const addressDistrictObject = generateRandomString(20);",
									"const addressPostalCodeObject = generateRandomString(10);",
									"const addressPhoneObject = generateRandomString(10);",
									"pm.globals.set(\"store_addressObject\", JSON.stringify(addressObject));",
									"pm.globals.set(\"store_addressObject2\", JSON.stringify(addressObject2));",
									"pm.globals.set(\"store_addressDistrictObject\", JSON.stringify(addressDistrictObject));",
									"pm.globals.set(\"store_addressPostalCodeObject\", JSON.stringify(addressPostalCodeObject));",
									"pm.globals.set(\"store_addressPhoneObject\", JSON.stringify(addressPhoneObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": {{store_addressObject}},\n    \"address2\": {{store_addressObject2}},\n    \"district\": {{store_addressDistrictObject}},\n    \"city_id\": {{store_cityId}},\n    \"postal_code\": {{store_addressPostalCodeObject}},\n    \"phone\": {{store_addressPhoneObject}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/address",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /store/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.be.an(\"object\");",
									"",
									"    pm.expect(jsonData.data).to.have.property(\"store_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"manager_staff_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"",
									"    pm.globals.set(\"store_id\", pm.response.json().data.store_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address_id\": {{store_addressId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/store/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"store",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{store_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /store/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an object containing object with store_id, store, and last_update\", function () {",
									"    var responseData = pm.response.json().deleted;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"",
									"    pm.expect(responseData).to.have.property(\"store_id\").that.is.a(\"number\");",
									"    pm.expect(responseData).to.have.property(\"manager_staff_id\").that.is.a(\"number\");",
									"    pm.expect(responseData).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(responseData).to.have.property(\"last_update\").that.is.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/store/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"store",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{store_id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "internal/store"
		},
		{
			"name": "inventory",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /country",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let countryName = generateRandomString(50)",
									"pm.globals.set(\"inventory_countryName\", countryName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"country_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"country\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"inventory_countryId\", pm.response.json().data.country_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"{{inventory_countryName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/country",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /city",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let cityName = generateRandomString(50)",
									"pm.globals.set(\"inventory_cityName\", cityName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"city\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"inventory_cityId\", pm.response.json().data.city_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"city\": \"{{inventory_cityName}}\",\n    \"country_id\": {{inventory_countryId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/city",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"city"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Validate 'data' structure\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"address\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"address2\").that.is.a(\"string\"); // Can be empty",
									"    pm.expect(jsonData.data).to.have.property(\"district\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"postal_code\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"phone\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"inventory_addressId\", pm.response.json().data.address_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    let result = '';",
									"    for (let i = 0; i < length; i++) {",
									"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
									"    }",
									"    return result;",
									"}",
									"",
									"const addressObject = generateRandomString(50);",
									"const addressObject2 = generateRandomString(50);",
									"const addressDistrictObject = generateRandomString(20);",
									"const addressPostalCodeObject = generateRandomString(10);",
									"const addressPhoneObject = generateRandomString(10);",
									"pm.globals.set(\"inventory_addressObject\", JSON.stringify(addressObject));",
									"pm.globals.set(\"inventory_addressObject2\", JSON.stringify(addressObject2));",
									"pm.globals.set(\"inventory_addressDistrictObject\", JSON.stringify(addressDistrictObject));",
									"pm.globals.set(\"inventory_addressPostalCodeObject\", JSON.stringify(addressPostalCodeObject));",
									"pm.globals.set(\"inventory_addressPhoneObject\", JSON.stringify(addressPhoneObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": {{inventory_addressObject}},\n    \"address2\": {{inventory_addressObject2}},\n    \"district\": {{inventory_addressDistrictObject}},\n    \"city_id\": {{inventory_cityId}},\n    \"postal_code\": {{inventory_addressPostalCodeObject}},\n    \"phone\": {{inventory_addressPhoneObject}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/address",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /store",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.be.an(\"object\");",
									"",
									"    pm.expect(jsonData.data).to.have.property(\"store_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"manager_staff_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"",
									"    let dateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}Z$/;",
									"    pm.expect(jsonData.data.last_update).to.match(dateRegex);",
									"",
									"    pm.globals.set(\"inventory_storeId\", pm.response.json().data.store_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address_id\": {{inventory_addressId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/store",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"store"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"    ",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject = generateRandomFilm()",
									"pm.globals.set(\"inventory_filmObject\", JSON.stringify(filmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Film object structure is valid\", function () {",
									"    pm.expect(responseJSON.data).has.property('film_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('title').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('description').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('release_year').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('language_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_duration').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_rate').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('length').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('replacement_cost').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rating').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('last_update').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('special_features').that.is.an('array');",
									"    pm.expect(responseJSON.data).has.property('fulltext').that.is.a('string');",
									"    pm.globals.set(\"inventory_filmId\", pm.response.json().data.film_id);",
									"    pm.globals.set(\"inventory_filmTitle\", pm.response.json().data.title);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{inventory_filmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /inventory",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"inventory_filmId = pm.globals.get(\"inventory_filmId\");",
									"inventory_storeId = pm.globals.get(\"inventory_storeId\");",
									"",
									"let inventoryObject = {",
									"    film_id: inventory_filmId,",
									"    store_id: inventory_storeId",
									"};",
									"",
									"pm.globals.set(\"inventoryObject\", JSON.stringify(inventoryObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response structure is correct\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    ",
									"    let data = jsonData.data;",
									"    pm.expect(data).to.have.property(\"inventory_id\").that.is.a(\"number\");",
									"    pm.expect(data).to.have.property(\"film_id\").that.is.a(\"number\");",
									"    pm.expect(data).to.have.property(\"store_id\").that.is.a(\"number\");",
									"    pm.expect(data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"",
									"    let dateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+Z$/;",
									"    pm.expect(data.last_update).to.match(dateRegex);",
									"",
									"    pm.globals.set(\"inventoryId\", pm.response.json().data.inventory_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{inventoryObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/inventory",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /inventories",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array containing objects with inventory_id, film_id, store_id and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((inventory) => {",
									"        pm.expect(inventory).to.have.property('inventory_id').that.is.a('number');",
									"        pm.expect(inventory).to.have.property('film_id').that.is.a('number');",
									"        pm.expect(inventory).to.have.property('store_id').that.is.a('number');",
									"        pm.expect(inventory).to.have.property('last_update').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/inventories",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"inventories"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /inventory/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an object containing objects with inventory_id, film_id, store_id and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('inventory_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('store_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/inventory/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"inventory",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{inventoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /inventory/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.be.an(\"object\");",
									"",
									"    pm.expect(jsonData.data).to.have.property(\"inventory_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"film_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"store_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"film_id\": {{inventory_filmId}},\n    \"store_id\": {{inventory_storeId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/inventory/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"inventory",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{inventoryId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /inventory/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    var responseData = pm.response.json().deleted;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"",
									"    pm.expect(responseData).to.have.property(\"inventory_id\").that.is.a(\"number\");",
									"    pm.expect(responseData).to.have.property(\"film_id\").that.is.a(\"number\");",
									"    pm.expect(responseData).to.have.property(\"store_id\").that.is.a(\"number\");",
									"    pm.expect(responseData).to.have.property(\"last_update\").that.is.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/inventory/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"inventory",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{inventoryId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "customer",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /country",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let countryName = generateRandomString(50)",
									"pm.globals.set(\"customer_countryName\", countryName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"country_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"country\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"customer_countryId\", pm.response.json().data.country_id);",
									"    pm.globals.set(\"customer_country\", pm.response.json().data.country);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"{{customer_countryName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/country",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /city",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let cityName = generateRandomString(50)",
									"pm.globals.set(\"customer_cityName\", cityName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"city\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"customer_cityId\", pm.response.json().data.city_id);",
									"    pm.globals.set(\"customer_city\", pm.response.json().data.city);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"city\": \"{{customer_cityName}}\",\n    \"country_id\": {{customer_countryId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/city",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"city"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Validate 'data' structure\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"address\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"address2\").that.is.a(\"string\"); // Can be empty",
									"    pm.expect(jsonData.data).to.have.property(\"district\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"postal_code\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"phone\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"customer_addressId\", pm.response.json().data.address_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    let result = '';",
									"    for (let i = 0; i < length; i++) {",
									"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
									"    }",
									"    return result;",
									"}",
									"",
									"const addressObject = generateRandomString(50);",
									"const addressObject2 = generateRandomString(50);",
									"const addressDistrictObject = generateRandomString(20);",
									"const addressPostalCodeObject = generateRandomString(10);",
									"const addressPhoneObject = generateRandomString(10);",
									"pm.globals.set(\"customer_addressObject\", JSON.stringify(addressObject));",
									"pm.globals.set(\"customer_addressObject2\", JSON.stringify(addressObject2));",
									"pm.globals.set(\"customer_addressDistrictObject\", JSON.stringify(addressDistrictObject));",
									"pm.globals.set(\"customer_addressPostalCodeObject\", JSON.stringify(addressPostalCodeObject));",
									"pm.globals.set(\"customer_addressPhoneObject\", JSON.stringify(addressPhoneObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": {{customer_addressObject}},\n    \"address2\": {{customer_addressObject2}},\n    \"district\": {{customer_addressDistrictObject}},\n    \"city_id\": {{customer_cityId}},\n    \"postal_code\": {{customer_addressPostalCodeObject}},\n    \"phone\": {{customer_addressPhoneObject}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/address",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /store",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.be.an(\"object\");",
									"",
									"    pm.expect(jsonData.data).to.have.property(\"store_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"manager_staff_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"",
									"    pm.globals.set(\"customer_storeId\", pm.response.json().data.store_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address_id\": {{customer_addressId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/store",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"store"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /customer",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"",
									"    return result;",
									"}",
									"",
									"customer_storeId = pm.globals.get(\"customer_storeId\");",
									"let customerFirstName = generateRandomString(45);",
									"let customerLastName = generateRandomString(45);",
									"let customerEmail = `customer${Math.floor(Math.random() * 1000)}@example.com`;",
									"customer_addressId = pm.globals.get(\"customer_addressId\");",
									"let customerActiveBool = true;",
									"let customerActive = 1;",
									"",
									"let customerObject = {",
									"    store_id: customer_storeId,",
									"    first_name: customerFirstName,",
									"    last_name: customerLastName,",
									"    email: customerEmail,",
									"    address_id: customer_addressId,",
									"    activebool: customerActiveBool,",
									"    active: customerActive",
									"};",
									"",
									"pm.globals.set(\"customerObject\", JSON.stringify(customerObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"customer_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"store_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"first_name\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_name\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"email\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"activebool\").that.is.a(\"boolean\");",
									"    pm.expect(jsonData.data).to.have.property(\"create_date\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"active\").that.is.a(\"number\");",
									"",
									"    pm.globals.set(\"customerId\", pm.response.json().data.customer_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{customerObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/customer",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"customer"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /customers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array containing objects with expected customer fields\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((customer) => {",
									"        pm.expect(customer).to.have.property('customer_id').that.is.a('number');",
									"        pm.expect(customer).to.have.property('store_id').that.is.a('number');",
									"        pm.expect(customer).to.have.property('first_name').that.is.a('string');",
									"        pm.expect(customer).to.have.property('last_name').that.is.a('string');",
									"        pm.expect(customer).to.have.property('email').that.is.a('string');",
									"        pm.expect(customer).to.have.property('address_id').that.is.a('number');",
									"        pm.expect(customer).to.have.property('activebool').that.is.a('boolean');",
									"        pm.expect(customer).to.have.property('create_date').that.is.a('string');",
									"        pm.expect(customer).to.have.property('last_update').that.is.a('string');",
									"        pm.expect(customer).to.have.property('active').that.is.a('number');",
									"    });",
									"});",
									"",
									"pm.test(\"Response contains pagination fields\", function () {",
									"    var responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('limit').that.is.a('number');",
									"    pm.expect(responseJson).to.have.property('page').that.is.a('number');",
									"    pm.expect(responseJson).to.have.property('total').that.is.a('number');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/customers",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"customers"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /customer/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an object containing objects with inventory_id, film_id, store_id and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.have.property('customer_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('store_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('first_name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('email').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('address_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('activebool').that.is.a('boolean');",
									"    pm.expect(responseData).to.have.property('create_date').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('active').that.is.a('number');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/customer/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"customer",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{customerId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /customer/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"customer_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"store_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"first_name\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_name\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"email\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"activebool\").that.is.a(\"boolean\");",
									"    pm.expect(jsonData.data).to.have.property(\"create_date\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"active\").that.is.a(\"number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{customerObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/customer/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"customer",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{customerId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /customer/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    var responseData = pm.response.json().deleted;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"",
									"    pm.expect(responseData).to.have.property(\"customer_id\").that.is.a(\"number\");",
									"    pm.expect(responseData).to.have.property(\"store_id\").that.is.a(\"number\");",
									"    pm.expect(responseData).to.have.property(\"first_name\").that.is.a(\"string\");",
									"    pm.expect(responseData).to.have.property(\"last_name\").that.is.a(\"string\");",
									"    pm.expect(responseData).to.have.property(\"email\").that.is.a(\"string\");",
									"    pm.expect(responseData).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(responseData).to.have.property(\"activebool\").that.is.a(\"boolean\");",
									"    pm.expect(responseData).to.have.property(\"create_date\").that.is.a(\"string\");",
									"    pm.expect(responseData).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.expect(responseData).to.have.property(\"active\").that.is.a(\"number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/customer/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"customer",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{customerId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "internal/customer"
		},
		{
			"name": "staff",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /country",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let countryName = generateRandomString(50)",
									"pm.globals.set(\"staff_countryName\", countryName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"country_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"country\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"staff_countryId\", pm.response.json().data.country_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"{{staff_countryName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/country",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /city",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let cityName = generateRandomString(50)",
									"pm.globals.set(\"staff_cityName\", cityName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"city\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"staff_cityId\", pm.response.json().data.city_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"city\": \"{{staff_cityName}}\",\n    \"country_id\": {{staff_countryId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/city",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"city"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Validate 'data' structure\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"address\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"address2\").that.is.a(\"string\"); // Can be empty",
									"    pm.expect(jsonData.data).to.have.property(\"district\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"postal_code\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"phone\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"staff_addressId\", pm.response.json().data.address_id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    let result = '';",
									"    for (let i = 0; i < length; i++) {",
									"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
									"    }",
									"    return result;",
									"}",
									"",
									"const addressObject = generateRandomString(50);",
									"const addressObject2 = generateRandomString(50);",
									"const addressDistrictObject = generateRandomString(20);",
									"const addressPostalCodeObject = generateRandomString(10);",
									"const addressPhoneObject = generateRandomString(10);",
									"pm.globals.set(\"staff_addressObject\", JSON.stringify(addressObject));",
									"pm.globals.set(\"staff_addressObject2\", JSON.stringify(addressObject2));",
									"pm.globals.set(\"staff_addressDistrictObject\", JSON.stringify(addressDistrictObject));",
									"pm.globals.set(\"staff_addressPostalCodeObject\", JSON.stringify(addressPostalCodeObject));",
									"pm.globals.set(\"staff_addressPhoneObject\", JSON.stringify(addressPhoneObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": {{staff_addressObject}},\n    \"address2\": {{staff_addressObject2}},\n    \"district\": {{staff_addressDistrictObject}},\n    \"city_id\": {{staff_cityId}},\n    \"postal_code\": {{staff_addressPostalCodeObject}},\n    \"phone\": {{staff_addressPhoneObject}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/address",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /store",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'data' key\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Response structure is valid\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.be.an(\"object\");",
									"",
									"    pm.expect(jsonData.data).to.have.property(\"store_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"manager_staff_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"address_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"",
									"    let dateRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}Z$/;",
									"    pm.expect(jsonData.data.last_update).to.match(dateRegex);",
									"",
									"    pm.globals.set(\"staff_storeId\", pm.response.json().data.store_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address_id\": {{staff_addressId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/store",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"store"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /staff",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"",
									"    return result;",
									"}",
									"",
									"let staffFirstName = generateRandomString(45);",
									"let staffLastName = generateRandomString(45);",
									"staff_addressId = pm.globals.get(\"staff_addressId\");",
									"let staffEmail = `staff${Math.floor(Math.random() * 1000)}@example.com`;",
									"staff_storeId = pm.globals.get(\"staff_storeId\");",
									"let staffActive = true;",
									"let staffUsername = `username` + generateRandomString(8);",
									"let staffPassword = `password${Math.floor(Math.random() * 1000)}1!*Aa`;",
									"",
									"",
									"let staffObject = {",
									"    first_name: staffFirstName,",
									"    last_name: staffLastName,",
									"    address_id: staff_addressId,",
									"    email: staffEmail,",
									"    store_id: staff_storeId,",
									"    active: staffActive,",
									"    username: staffUsername,",
									"    password: staffPassword,",
									"};",
									"",
									"pm.globals.set(\"staffObject\", JSON.stringify(staffObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{staffObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/staff",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"staff"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /staffs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array containing objects with expected staff fields\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"",
									"    responseData.forEach((staff) => {",
									"        pm.expect(staff).to.have.property('staff_id').that.is.a('number');",
									"        pm.expect(staff).to.have.property('first_name').that.is.a('string');",
									"        pm.expect(staff).to.have.property('last_name').that.is.a('string');",
									"        pm.expect(staff).to.have.property('address_id').that.is.a('number');",
									"        pm.expect(staff).to.have.property('email').that.is.a('string');",
									"        pm.expect(staff).to.have.property('store_id').that.is.a('number');",
									"        pm.expect(staff).to.have.property('active').that.is.a('boolean');",
									"        pm.expect(staff).to.have.property('username').that.is.a('string');",
									"        pm.expect(staff).to.have.property('password').that.is.a('string');",
									"        pm.expect(staff).to.have.property('last_update').that.is.a('string');",
									"        pm.expect(staff).to.have.property('picture').that.is.a('string');        ",
									"    });",
									"});",
									"",
									"pm.test(\"Response contains pagination fields\", function () {",
									"    var responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.have.property('limit').that.is.a('number');",
									"    pm.expect(responseJson).to.have.property('page').that.is.a('number');",
									"    pm.expect(responseJson).to.have.property('total').that.is.a('number');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/staffs",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"staffs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "rental",
			"item": []
		},
		{
			"name": "payment",
			"item": []
		},
		{
			"name": "user",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.clear();",
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateUser() {",
									"  return {",
									"    user_id: null,",
									"    email: `user${Math.floor(Math.random() * 1000)}@example.com`,",
									"    password: `password${Math.floor(Math.random() * 1000)}1!*Aa`,",
									"    last_update: new Date().toISOString(),",
									"    deleted_at: null",
									"  };",
									"}",
									"",
									"userObject = generateUser()",
									"pm.globals.set(\"userObject\", JSON.stringify(userObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response data is existing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Fields types matches expected ones\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"user_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"email\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"password\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{userObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/user",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"userObject = pm.globals.get(\"userObject\");",
									"userObject = JSON.parse(userObject)",
									"pm.globals.set(\"userObject.email\", userObject.email);",
									"pm.globals.set(\"userObject.password\", userObject.password);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.equal(\"successfully authorized\");",
									"    pm.expect(jsonData.token).to.be.a(\"string\");",
									"    pm.globals.set(\"authToken\", jsonData.token);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userObject.email}}\",\n    \"password\": \"{{userObject.password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api_url}}/users?page=1&limit=10",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "various",
			"item": [
				{
					"name": "cors",
					"item": [
						{
							"name": "GET /ping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.equal(403);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.clear();",
											"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Origin",
										"value": "http://localhost:3001",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/ping",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "files",
					"item": [
						{
							"name": "GET /file",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"filepath\", \"img/folder1/img.png\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/files/{{filepath}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"files",
										"{{filepath}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "development",
					"item": [
						{
							"name": "GET /test",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/test",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"test"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}