{
	"info": {
		"_postman_id": "414a24ec-a41c-4b46-a9d6-d5d30465ec97",
		"name": "dvd_rental",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7375862"
	},
	"item": [
		{
			"name": "languages",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"language_id\");",
									"    pm.expect(pm.response.json().data.language_id).to.exist;",
									"    pm.globals.set(\"languageId\", pm.response.json().data.language_id);",
									"    pm.globals.set(\"languageName\", pm.response.json().data.name);",
									"});",
									"",
									"pm.test(\"Response contains the fields language_id, name, and last_update with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let languageName = generateRandomString(6)",
									"pm.globals.set(\"languageName\", languageName);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{languageName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/language",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"language"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches expectations\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"data\");",
									"    pm.expect(pm.response.text()).to.include(\"errors\");",
									"});",
									"",
									"pm.test(\"Response is an array containing objects with language_id, name, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((language) => {",
									"        pm.expect(language).to.have.property('language_id').that.is.a('number');",
									"        pm.expect(language).to.have.property('name').that.is.a('string');",
									"        pm.expect(language).to.have.property('last_update').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let languageName1 = generateRandomString(6)",
									"let languageName2 = generateRandomString(6)",
									"let languageName3 = generateRandomString(21)",
									"pm.globals.set(\"languageName1\", languageName1);",
									"pm.globals.set(\"languageName2\", languageName2);",
									"pm.globals.set(\"languageName3\", languageName3);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"name\": \"{{languageName1}}\"\n    },\n    {\n        \"name\": \"{{languageName2}}\"\n    },\n    {\n        \"name\": \"{{languageName3}}\"\n    }\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/languages",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /languages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with language_id, name, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((language) => {",
									"    pm.expect(language).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(language).to.have.property('name').that.is.a('string');",
									"    pm.expect(language).to.have.property('last_update').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/languages?page=1&limit=10",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"languages"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /languages filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with language_id, name, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((language) => {",
									"    pm.expect(language).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(language).to.have.property('name').that.is.a('string');",
									"    pm.expect(language).to.have.property('last_update').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/languages?page=1&limit=10&name={{languageName}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"languages"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "name",
									"value": "{{languageName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /language/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"language_id\");",
									"    pm.expect(pm.response.json().data.language_id).to.exist;",
									"    pm.globals.set(\"languageId\", pm.response.json().data.language_id);",
									"});",
									"",
									"pm.test(\"Response contains the fields language_id, name, and last_update with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/language/{{languageId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"language",
								"{{languageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /language/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let updatedLanguageName = generateRandomString(6)",
									"pm.globals.set(\"updatedLanguageName\", updatedLanguageName);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"language_id\");",
									"    pm.expect(pm.response.json().data.language_id).to.exist;",
									"    pm.globals.set(\"languageId\", pm.response.json().data.language_id);",
									"});",
									"",
									"pm.test(\"Response contains the fields language_id, name, and last_update with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{updatedLanguageName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/language/{{languageId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"language",
								"{{languageId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /language/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"language_id\");",
									"    pm.expect(pm.response.json().deleted.language_id).to.exist;",
									"    pm.globals.set(\"languageId\", pm.response.json().deleted.language_id);",
									"});",
									"",
									"pm.test(\"Response contains the fields language_id, name, and last_update with correct data types\", function () {",
									"    var responseData = pm.response.json().deleted;",
									"",
									"    pm.expect(responseData).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/language/{{languageId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"language",
								"{{languageId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "actors",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /actor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let firstName = generateRandomString(6)",
									"let lastName = generateRandomString(8)",
									"pm.globals.set(\"firstName\", firstName);",
									"pm.globals.set(\"lastName\", lastName);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"actor_id\");",
									"    pm.expect(pm.response.json().data.actor_id).to.exist;",
									"    pm.globals.set(\"actorId\", pm.response.json().data.actor_id);",
									"});",
									"",
									"pm.test(\"Response contains the fields actor_id, first_name, and last_name with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('actor_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('first_name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_name').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"{{firstName}}\",\n    \"last_name\": \"{{lastName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actor",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actor"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /actors",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let firstNameActor1 = generateRandomString(6)",
									"let lastNameActor1 = generateRandomString(8)",
									"let firstNameActor2 = generateRandomString(6)",
									"let lastNameActor2 = generateRandomString(8)",
									"let lastNameActor3 = generateRandomString(8)",
									"pm.globals.set(\"firstNameActor1\", firstNameActor1);",
									"pm.globals.set(\"lastNameActor1\", lastNameActor1);",
									"pm.globals.set(\"firstNameActor2\", firstNameActor2);",
									"pm.globals.set(\"lastNameActor2\", lastNameActor2);",
									"pm.globals.set(\"lastNameActor3\", lastNameActor2);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches expectations\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"data\");",
									"    pm.expect(pm.response.text()).to.include(\"errors\");",
									"});",
									"",
									"pm.test(\"Response is an array containing objects with actor_id, first_name, and last_name\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((actor) => {",
									"        pm.expect(actor).to.have.property('actor_id');",
									"        pm.expect(actor).to.have.property('first_name');",
									"        pm.expect(actor).to.have.property('last_name');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n        \"first_name\": \"{{firstNameActor1}}\",\n        \"last_name\": \"{{lastNameActor1}}\"\n    },\n    {\n        \"first_name\": \"{{firstNameActor2}}\",\n        \"last_name\": \"{{lastNameActor2}}\"\n    },\n    {\n        \"last_name\": \"{{lastNameActor3}}\"\n    }\n]\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actors",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with actor_id, first_name, and last_name\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((actor) => {",
									"        pm.expect(actor).to.have.property('actor_id');",
									"        pm.expect(actor).to.have.property('first_name');",
									"        pm.expect(actor).to.have.property('last_name');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actors?page=1&limit=10",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actors"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /actor/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains the fields actor_id, first_name, and last_name with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('actor_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('first_name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_name').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actor/{{actorId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actor",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /actor/:id/films",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains the fields actor_id, first_name, and last_name with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('actor_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('first_name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_name').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actor/{{actorId}}/films",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actor",
								"{{actorId}}",
								"films"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /actor/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains the fields actor_id, first_name, and last_name with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('actor_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('first_name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_name').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let updatedFirstName = generateRandomString(6)",
									"let updatedLastName = generateRandomString(8)",
									"pm.globals.set(\"updatedFirstName\", updatedFirstName);",
									"pm.globals.set(\"updatedLastName\", updatedLastName);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"{{updatedFirstName}}\",\n    \"last_name\": \"{{updatedLastName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actor/{{actorId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actor",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /actor/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct body\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.deleted.actor_id).to.be.a(\"number\");",
									"    pm.expect(jsonData.deleted.first_name).to.be.a(\"string\");",
									"    pm.expect(jsonData.deleted.last_name).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/actor/{{actorId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actor",
								"{{actorId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "films",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"    ",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject = generateRandomFilm()",
									"pm.globals.set(\"filmObject\", JSON.stringify(filmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Film object structure is valid\", function () {",
									"    pm.expect(responseJSON.data).has.property('film_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('title').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('description').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('release_year').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('language_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_duration').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_rate').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('length').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('replacement_cost').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rating').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('last_update').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('special_features').that.is.an('array');",
									"    pm.expect(responseJSON.data).has.property('fulltext').that.is.a('string');",
									"    pm.globals.set(\"filmId\", pm.response.json().data.film_id);",
									"    pm.globals.set(\"filmTitle\", pm.response.json().data.title);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{filmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /films",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject1 = generateRandomFilm()",
									"filmObject2 = generateRandomFilm()",
									"filmObject3 = { foo: 1 }",
									"var combinedFilmObject = []",
									"combinedFilmObject.push(filmObject1, filmObject2, filmObject3)",
									"pm.globals.set(\"combinedFilmObject\", JSON.stringify(combinedFilmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('errors');",
									"});",
									"",
									"pm.test(\"Response should be valid and contain required fields\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('array');",
									"    jsonData.data.forEach(film => {",
									"        pm.expect(film).to.have.property('film_id').that.is.a('number');",
									"        pm.expect(film).to.have.property('title').that.is.a('string');",
									"        pm.expect(film).to.have.property('description').that.is.a('string');",
									"        pm.expect(film).to.have.property('release_year').that.is.a('number');",
									"        pm.expect(film).to.have.property('language_id').that.is.a('number');",
									"        pm.expect(film).to.have.property('rental_duration').that.is.a('number');",
									"        pm.expect(film).to.have.property('rental_rate').that.is.a('number');",
									"        pm.expect(film).to.have.property('length').that.is.a('number');",
									"        pm.expect(film).to.have.property('replacement_cost').that.is.a('number');",
									"        pm.expect(film).to.have.property('rating').that.is.a('string');",
									"        pm.expect(film).to.have.property('last_update').that.is.a('string');",
									"        pm.expect(film).to.have.property('special_features').that.is.an('array');",
									"        pm.expect(film).to.have.property('fulltext').that.is.a('string');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{combinedFilmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/films",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"films"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film/:id discount",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomFloat(min = 1, max = 99) {",
									"    return Math.random() * (max - min) + min;",
									"}",
									"",
									"filmDiscount = getRandomFloat()",
									"pm.globals.set(\"filmDiscount\", JSON.stringify(filmDiscount));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields for a single film\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('object');",
									"    let film = jsonData.data;",
									"    pm.expect(film).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(film).to.have.property('title').that.is.a('string');",
									"    pm.expect(film).to.have.property('description').that.is.a('string');",
									"    pm.expect(film).to.have.property('release_year').that.is.a('number');",
									"    pm.expect(film).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(film).to.have.property('rental_duration').that.is.a('number');",
									"    pm.expect(film).to.have.property('rental_rate').that.is.a('number');",
									"    pm.expect(film).to.have.property('length').that.is.a('number');",
									"    pm.expect(film).to.have.property('replacement_cost').that.is.a('number');",
									"    pm.expect(film).to.have.property('rating').that.is.a('string');",
									"    pm.expect(film).to.have.property('last_update').that.is.a('string');",
									"    pm.expect(film).to.have.property('special_features').that.is.an('array');",
									"    pm.expect(film).to.have.property('fulltext').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"discount\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film/{{filmId}}/discount",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film",
								"{{filmId}}",
								"discount"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /films",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('array');",
									"    jsonData.data.forEach(film => {",
									"        pm.expect(film).to.have.property('film_id').that.is.a('number');",
									"        pm.expect(film).to.have.property('title').that.is.a('string');",
									"        pm.expect(film).to.have.property('description').that.is.a('string');",
									"        pm.expect(film).to.have.property('release_year').that.is.a('number');",
									"        pm.expect(film).to.have.property('language_id').that.is.a('number');",
									"        pm.expect(film).to.have.property('rental_duration').that.is.a('number');",
									"        pm.expect(film).to.have.property('rental_rate').that.is.a('number');",
									"        pm.expect(film).to.have.property('length').that.is.a('number');",
									"        pm.expect(film).to.have.property('replacement_cost').that.is.a('number');",
									"        pm.expect(film).to.have.property('rating').that.is.a('string');",
									"        pm.expect(film).to.have.property('last_update').that.is.a('string');",
									"        pm.expect(film).to.have.property('special_features').that.is.an('array');",
									"        pm.expect(film).to.have.property('fulltext').that.is.a('string');",
									"    });",
									"    pm.expect(jsonData).to.have.property('limit').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('page').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('total').that.is.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/films?page=1&limit=10",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"films"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /films filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('array');",
									"    jsonData.data.forEach(film => {",
									"        pm.expect(film).to.have.property('film_id').that.is.a('number');",
									"        pm.expect(film).to.have.property('title').that.is.a('string');",
									"        pm.expect(film).to.have.property('description').that.is.a('string');",
									"        pm.expect(film).to.have.property('release_year').that.is.a('number');",
									"        pm.expect(film).to.have.property('language_id').that.is.a('number');",
									"        pm.expect(film).to.have.property('rental_duration').that.is.a('number');",
									"        pm.expect(film).to.have.property('rental_rate').that.is.a('number');",
									"        pm.expect(film).to.have.property('length').that.is.a('number');",
									"        pm.expect(film).to.have.property('replacement_cost').that.is.a('number');",
									"        pm.expect(film).to.have.property('rating').that.is.a('string');",
									"        pm.expect(film).to.have.property('last_update').that.is.a('string');",
									"        pm.expect(film).to.have.property('special_features').that.is.an('array');",
									"        pm.expect(film).to.have.property('fulltext').that.is.a('string');",
									"    });",
									"    pm.expect(jsonData).to.have.property('limit').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('page').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('total').that.is.a('number');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/films?page=1&limit=10&title={{filmTitle}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"films"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "title",
									"value": "{{filmTitle}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /film/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields for a single film\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('object');",
									"    let film = jsonData.data;",
									"    pm.expect(film).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(film).to.have.property('title').that.is.a('string');",
									"    pm.expect(film).to.have.property('description').that.is.a('string');",
									"    pm.expect(film).to.have.property('release_year').that.is.a('number');",
									"    pm.expect(film).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(film).to.have.property('rental_duration').that.is.a('number');",
									"    pm.expect(film).to.have.property('rental_rate').that.is.a('number');",
									"    pm.expect(film).to.have.property('length').that.is.a('number');",
									"    pm.expect(film).to.have.property('replacement_cost').that.is.a('number');",
									"    pm.expect(film).to.have.property('rating').that.is.a('string');",
									"    pm.expect(film).to.have.property('last_update').that.is.a('string');",
									"    pm.expect(film).to.have.property('special_features').that.is.an('array');",
									"    pm.expect(film).to.have.property('fulltext').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film/{{filmId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film",
								"{{filmId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /film/:id/actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields for a single film\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('object');",
									"    let film = jsonData.data;",
									"    pm.expect(film).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(film).to.have.property('title').that.is.a('string');",
									"    pm.expect(film).to.have.property('description').that.is.a('string');",
									"    pm.expect(film).to.have.property('release_year').that.is.a('number');",
									"    pm.expect(film).to.have.property('language_id').that.is.a('number');",
									"    pm.expect(film).to.have.property('rental_duration').that.is.a('number');",
									"    pm.expect(film).to.have.property('rental_rate').that.is.a('number');",
									"    pm.expect(film).to.have.property('length').that.is.a('number');",
									"    pm.expect(film).to.have.property('replacement_cost').that.is.a('number');",
									"    pm.expect(film).to.have.property('rating').that.is.a('string');",
									"    pm.expect(film).to.have.property('last_update').that.is.a('string');",
									"    pm.expect(film).to.have.property('special_features').that.is.an('array');",
									"    pm.expect(film).to.have.property('fulltext').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film/{{filmId}}/actors",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film",
								"{{filmId}}",
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /film/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"    ",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject = generateRandomFilm()",
									"pm.globals.set(\"updatedFilmObject\", JSON.stringify(filmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Film object structure is valid\", function () {",
									"    pm.expect(responseJSON.data).has.property('film_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('title').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('description').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('release_year').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('language_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_duration').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_rate').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('length').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('replacement_cost').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rating').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('last_update').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('special_features').that.is.an('array');",
									"    pm.expect(responseJSON.data).has.property('fulltext').that.is.a('string');",
									"    pm.globals.set(\"filmId\", pm.response.json().data.film_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{updatedFilmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film/{{filmId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film",
								"{{filmId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /film/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct body\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.deleted.film_id).to.be.a(\"number\");",
									"    pm.expect(jsonData.deleted.title).to.be.a(\"string\");",
									"    pm.expect(jsonData.deleted.description).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film/{{filmId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film",
								"{{filmId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "categories",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateCategory(id = null) {",
									"    return {",
									"        category_id: id ?? Math.floor(Math.random() * 1000),",
									"        name: `Category_${Math.random().toString(36).substring(7)}`,",
									"        last_update: new Date().toISOString(),",
									"        deleted_at: null",
									"    };",
									"}",
									"",
									"categoryObject = generateCategory()",
									"pm.globals.set(\"categoryObject\", JSON.stringify(categoryObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check status\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check response data\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.have.property(\"category_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"name\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"",
									"    pm.globals.set(\"categoryId\", pm.response.json().data.category_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{categoryObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/category",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('array');",
									"    jsonData.data.forEach(category => {",
									"        pm.expect(category).to.have.property('category_id').that.is.a('number');",
									"        pm.expect(category).to.have.property('name').that.is.a('string');",
									"        pm.expect(category).to.have.property('last_update').that.is.a('string');",
									"    });",
									"    ",
									"    pm.expect(jsonData).to.have.property('limit').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('page').that.is.a('number');",
									"    pm.expect(jsonData).to.have.property('total').that.is.a('number');    ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/categories",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /category/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should be valid and contain required fields for a single category\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data').that.is.an('object');",
									"    let category = jsonData.data;",
									"    pm.expect(category).to.have.property('category_id').that.is.a('number');",
									"    pm.expect(category).to.have.property('name').that.is.a('string');",
									"    pm.expect(category).to.have.property('last_update').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/category/{{categoryId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"category",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /category/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomCategory() {",
									"    return {",
									"        name: `Name ${Math.floor(Math.random() * 1000)}`,",
									"    };",
									"}",
									"",
									"categoryObject = generateRandomCategory()",
									"pm.globals.set(\"updatedCategoryObject\", JSON.stringify(categoryObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check status\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check response data\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.have.property(\"category_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"name\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"",
									"    pm.globals.set(\"categoryId\", pm.response.json().data.category_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{updatedCategoryObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/category/{{categoryId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"category",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /category/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct body\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.deleted.category_id).to.be.a(\"number\");",
									"    pm.expect(jsonData.deleted.name).to.be.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/category/{{categoryId}}",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"category",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "film_actors",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /actor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"let firstName = generateRandomString(6)",
									"let lastName = generateRandomString(8)",
									"pm.globals.set(\"firstName\", firstName);",
									"pm.globals.set(\"lastName\", lastName);",
									"",
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"actor_id\");",
									"    pm.expect(pm.response.json().data.actor_id).to.exist;",
									"    pm.globals.set(\"actorId\", pm.response.json().data.actor_id);",
									"});",
									"",
									"pm.test(\"Response contains the fields actor_id, first_name, and last_name with correct data types\", function () {",
									"    var responseData = pm.response.json().data;",
									"",
									"    pm.expect(responseData).to.have.property('actor_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('first_name').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_name').that.is.a('string');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"{{firstName}}\",\n    \"last_name\": \"{{lastName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/actor",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"actor"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"    ",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject = generateRandomFilm()",
									"pm.globals.set(\"filmObject\", JSON.stringify(filmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Film object structure is valid\", function () {",
									"    pm.expect(responseJSON.data).has.property('film_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('title').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('description').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('release_year').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('language_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_duration').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_rate').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('length').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('replacement_cost').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rating').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('last_update').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('special_features').that.is.an('array');",
									"    pm.expect(responseJSON.data).has.property('fulltext').that.is.a('string');",
									"    pm.globals.set(\"filmId\", pm.response.json().data.film_id);",
									"    pm.globals.set(\"filmTitle\", pm.response.json().data.title);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{filmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film-actor",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains 'data' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Fields inside 'data' are valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"actor_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"film_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actor_id\": {{actorId}},\n    \"film_id\": {{filmId}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film-actor",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-actor"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /film-actors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains 'data' array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
									"});",
									"",
									"pm.test(\"'data' array is not empty\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Each object in 'data' array has valid fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.forEach(item => {",
									"        pm.expect(item).to.have.property(\"actor_id\").that.is.a(\"number\");",
									"        pm.expect(item).to.have.property(\"film_id\").that.is.a(\"number\");",
									"        pm.expect(item).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    });",
									"});",
									"",
									"pm.test(\"Response contains 'limit', 'page', and 'total' fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"limit\").that.is.a(\"number\");",
									"    pm.expect(jsonData).to.have.property(\"page\").that.is.a(\"number\");",
									"    pm.expect(jsonData).to.have.property(\"total\").that.is.a(\"number\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film-actors",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /film_actor/:actor_id/:film_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains 'data' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Fields inside 'data' are valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"actor_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"film_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film_actor/:actor_id/:film_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film_actor",
								":actor_id",
								":film_id"
							],
							"variable": [
								{
									"key": "actor_id",
									"value": "{{actorId}}"
								},
								{
									"key": "film_id",
									"value": "{{filmId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"    ",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject = generateRandomFilm()",
									"pm.globals.set(\"filmObject\", JSON.stringify(filmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Film object structure is valid\", function () {",
									"    pm.expect(responseJSON.data).has.property('film_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('title').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('description').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('release_year').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('language_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_duration').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_rate').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('length').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('replacement_cost').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rating').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('last_update').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('special_features').that.is.an('array');",
									"    pm.expect(responseJSON.data).has.property('fulltext').that.is.a('string');",
									"    pm.globals.set(\"updatedFilmId\", pm.response.json().data.film_id);",
									"    pm.globals.set(\"updatedFilmTitle\", pm.response.json().data.title);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{filmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /film_actor/:actor_id/:film_id",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actor_id\": {{actorId}},\n    \"film_id\": {{updatedFilmId}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film_actor/:actor_id/:film_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film_actor",
								":actor_id",
								":film_id"
							],
							"variable": [
								{
									"key": "actor_id",
									"value": "{{actorId}}"
								},
								{
									"key": "film_id",
									"value": "{{filmId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /film_actor/:actor_id/:film_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response should have a 'deleted' object\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"deleted\");",
									"});",
									"",
									"pm.test(\"'deleted' object should contain expected properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.deleted).to.have.property(\"actor_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.deleted).to.have.property(\"film_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.deleted).to.have.property(\"last_update\").that.is.a(\"string\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film_actor/:actor_id/:film_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film_actor",
								":actor_id",
								":film_id"
							],
							"variable": [
								{
									"key": "actor_id",
									"value": "{{actorId}}"
								},
								{
									"key": "film_id",
									"value": "{{updatedFilmId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "film_category",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateCategory(id = null) {",
									"    return {",
									"        category_id: id ?? Math.floor(Math.random() * 1000),",
									"        name: `Category_${Math.random().toString(36).substring(7)}`,",
									"        last_update: new Date().toISOString(),",
									"        deleted_at: null",
									"    };",
									"}",
									"",
									"categoryObject = generateCategory()",
									"pm.globals.set(\"categoryObject\", JSON.stringify(categoryObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check status\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Check response data\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"    pm.expect(jsonData.data).to.have.property(\"category_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"name\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"",
									"    pm.globals.set(\"categoryId\", pm.response.json().data.category_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{categoryObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/category",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"    ",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject = generateRandomFilm()",
									"pm.globals.set(\"filmObject\", JSON.stringify(filmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Film object structure is valid\", function () {",
									"    pm.expect(responseJSON.data).has.property('film_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('title').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('description').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('release_year').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('language_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_duration').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_rate').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('length').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('replacement_cost').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rating').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('last_update').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('special_features').that.is.an('array');",
									"    pm.expect(responseJSON.data).has.property('fulltext').that.is.a('string');",
									"    pm.globals.set(\"filmId\", pm.response.json().data.film_id);",
									"    pm.globals.set(\"filmTitle\", pm.response.json().data.title);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{filmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film-category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateFilmCategory(filmId, categoryId) {",
									"    return {",
									"        film_id: filmId,",
									"        category_id: categoryId,",
									"        last_update: new Date().toISOString(),",
									"        deleted_at: null",
									"    };",
									"}",
									"",
									"filmId = pm.globals.get(\"filmId\");",
									"categoryId = pm.globals.get(\"categoryId\");",
									"",
									"const filmCategoryObject = generateFilmCategory(filmId, categoryId);",
									"pm.globals.set(\"filmCategoryObject\", JSON.stringify(filmCategoryObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(jsonData.data).to.have.property('category_id').that.is.a('number');",
									"    pm.expect(jsonData.data).to.have.property('last_update').that.is.a('string');",
									"    pm.globals.set(\"filmCategory\", pm.response.json().data.category_id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{filmCategoryObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film-category",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-category"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /film-categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    jsonData.data.forEach(film_category => {",
									"        pm.expect(film_category).to.have.property('film_id').that.is.a('number');",
									"        pm.expect(film_category).to.have.property('category_id').that.is.a('number');",
									"        pm.expect(film_category).to.have.property('last_update').that.is.a('string');",
									"    })",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film-categories?order=desc&field=category_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-categories"
							],
							"query": [
								{
									"key": "order",
									"value": "desc"
								},
								{
									"key": "field",
									"value": "category_id"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET film-category/:film_id/:category_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(jsonData.data).to.have.property('category_id').that.is.a('number');",
									"    pm.expect(jsonData.data).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film-category/:film_id/:category_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-category",
								":film_id",
								":category_id"
							],
							"variable": [
								{
									"key": "film_id",
									"value": "{{filmId}}"
								},
								{
									"key": "category_id",
									"value": "{{filmCategory}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT film-category/:film_id/:category_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(jsonData.data).to.have.property('category_id').that.is.a('number');",
									"    pm.expect(jsonData.data).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateFilmCategory(filmId, categoryId) {",
									"    return {",
									"        film_id: filmId,",
									"        category_id: categoryId,",
									"        last_update: new Date().toISOString(),",
									"        deleted_at: null",
									"    };",
									"}",
									"",
									"filmId = pm.globals.get(\"filmId\");",
									"categoryId = pm.globals.get(\"categoryId\");",
									"",
									"const updatedFilmCategoryObject = generateFilmCategory(filmId, categoryId);",
									"pm.globals.set(\"updatedFilmCategoryObject\", JSON.stringify(updatedFilmCategoryObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{updatedFilmCategoryObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film-category/:film_id/:category_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-category",
								":film_id",
								":category_id"
							],
							"variable": [
								{
									"key": "film_id",
									"value": "{{filmId}}"
								},
								{
									"key": "category_id",
									"value": "{{filmCategory}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT film-category/:film_id/:category_id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('deleted');",
									"    pm.expect(jsonData.deleted).to.have.property('film_id').that.is.a('number');",
									"    pm.expect(jsonData.deleted).to.have.property('category_id').that.is.a('number');",
									"    pm.expect(jsonData.deleted).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/film-category/:film_id/:category_id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film-category",
								":film_id",
								":category_id"
							],
							"variable": [
								{
									"key": "film_id",
									"value": "{{filmId}}"
								},
								{
									"key": "category_id",
									"value": "{{filmCategory}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "country",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /country",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let countryName = generateRandomString(50)",
									"pm.globals.set(\"countryName\", countryName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"country_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"country\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"country_id\", pm.response.json().data.country_id);",
									"    pm.globals.set(\"country\", pm.response.json().data.country);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"{{countryName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/country",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /countries",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with country_id, country, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((country) => {",
									"        pm.expect(country).to.have.property('country_id').that.is.a('number');",
									"        pm.expect(country).to.have.property('country').that.is.a('string');",
									"        pm.expect(country).to.have.property('last_update').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/countries",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"countries"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /country/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with country_id, country, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('country_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('country').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/country/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{country_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /country/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let updatedCountryName = generateRandomString(50)",
									"pm.globals.set(\"updatedCountryName\", updatedCountryName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with country_id, country, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('country_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('country').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"{{updatedCountryName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/country/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{country_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /country/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with country_id, country, and last_update\", function () {",
									"    var responseData = pm.response.json().deleted;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('country_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('country').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/country/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{country_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "city",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /country",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let countryName = generateRandomString(50)",
									"pm.globals.set(\"countryName\", countryName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"country_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"country\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"country_id\", pm.response.json().data.country_id);",
									"    pm.globals.set(\"country\", pm.response.json().data.country);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"country\": \"{{countryName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/country",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /city",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let cityName = generateRandomString(50)",
									"pm.globals.set(\"cityName\", cityName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Checking the data structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"city_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"city\").that.is.a(\"string\").and.not.empty;",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"    pm.globals.set(\"city_id\", pm.response.json().data.city_id);",
									"    pm.globals.set(\"city\", pm.response.json().data.city);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"city\": \"{{cityName}}\",\n    \"country_id\": {{country_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/city",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"city"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /cities",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with city_id, city, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach((city) => {",
									"        pm.expect(city).to.have.property('city_id').that.is.a('number');",
									"        pm.expect(city).to.have.property('city').that.is.a('string');",
									"        pm.expect(city).to.have.property('last_update').that.is.a('string');",
									"    });",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/cities",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"cities"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /city/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with city_id, city, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('city_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('city').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/city/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"city",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{city_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /city/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    const charactersLength = characters.length;",
									"    let result = '';",
									"    ",
									"    for (let i = 0; i < length; i++) {",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));",
									"    }",
									"    ",
									"    return result;",
									"}",
									"",
									"let updatedCityName = generateRandomString(50)",
									"pm.globals.set(\"updatedCityName\", updatedCityName);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with city_id, city, and last_update\", function () {",
									"    var responseData = pm.response.json().data;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('city_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('city').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"city\": \"{{updatedCityName}}\",\n    \"country_id\": {{country_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/city/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"city",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{city_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /city/:id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array containing objects with country_id, country, and last_update\", function () {",
									"    var responseData = pm.response.json().deleted;",
									"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
									"    pm.expect(responseData).to.have.property('country_id').that.is.a('number');",
									"    pm.expect(responseData).to.have.property('country').that.is.a('string');",
									"    pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{api_url}}/country/:id",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"country",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{country_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "address",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// pm.test(\"Body matches string\", function () {",
									"//     pm.expect(pm.response.text()).to.include(\"language_id\");",
									"//     pm.expect(pm.response.json().data.language_id).to.exist;",
									"//     pm.globals.set(\"languageId\", pm.response.json().data.language_id);",
									"//     pm.globals.set(\"languageName\", pm.response.json().data.name);",
									"// });",
									"",
									"// pm.test(\"Response contains the fields language_id, name, and last_update with correct data types\", function () {",
									"//     var responseData = pm.response.json().data;",
									"",
									"//     pm.expect(responseData).to.have.property('language_id').that.is.a('number');",
									"//     pm.expect(responseData).to.have.property('name').that.is.a('string');",
									"//     pm.expect(responseData).to.have.property('last_update').that.is.a('string');",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomString(length) {",
									"    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
									"    let result = '';",
									"    for (let i = 0; i < length; i++) {",
									"        result += chars.charAt(Math.floor(Math.random() * chars.length));",
									"    }",
									"    return result;",
									"}",
									"",
									"function generateTestAddress() {",
									"    return {",
									"        address: generateRandomString(50),",
									"        address2: generateRandomString(50),",
									"        district: generateRandomString(20),",
									"        city_id: Math.floor(Math.random() * 100),",
									"        city_id: 6,",
									"        postal_code: generateRandomString(10),",
									"        phone: `+1-${Math.floor(Math.random() * 10000000000)}`,",
									"        deleted_at: null,",
									"        customer: null,",
									"        staff: null,",
									"        store: null",
									"    };",
									"}",
									"",
									"const addressObject = generateTestAddress();",
									"pm.globals.set(\"addressObject\", JSON.stringify(addressObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{addressObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/address",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"address"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "customer",
			"item": []
		},
		{
			"name": "staff",
			"item": []
		},
		{
			"name": "store",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /store",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateStoreObject() {",
									"    const storeObject = {",
									"        manager_staff_id: Math.floor(Math.random() * 100) + 1,",
									"        address_id: Math.floor(Math.random() * 100) + 1,",
									"        last_update: new Date().toISOString(),",
									"        deletedAt: null,",
									"        // staff: generateStaffObject()",
									"    };",
									"",
									"    return storeObject;",
									"}",
									"storeObject = generateStoreObject();",
									"",
									"pm.globals.set(\"storeObject\", JSON.stringify(storeObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{storeObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/store",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"store"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "inventory",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /film",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomFilm() {",
									"    const ratings = [\"G\", \"PG\", \"PG-13\", \"R\", \"NC-17\"];",
									"    const specialFeaturesList = [\"Trailers\", \"Deleted Scenes\", \"Behind the Scenes\", \"Commentaries\"];",
									"    ",
									"    return {",
									"        title: `Title ${Math.floor(Math.random() * 1000)}`,",
									"        description: `Description ${Math.random().toString(36).substring(7)}`,",
									"        release_year: Math.floor(Math.random() * (2025 - 1900 + 1)) + 1901,",
									"        language_id: Math.floor(Math.random() * 6) + 1,",
									"        rental_duration: Math.floor(Math.random() * 30) + 1,",
									"        rental_rate: parseFloat((Math.random() * (10 - 1) + 1).toFixed(2)),",
									"        length: Math.floor(Math.random() * (240 - 60 + 1)) + 60,",
									"        replacement_cost: parseFloat((Math.random() * (20 - 1) + 1).toFixed(2)),",
									"        rating: ratings[Math.floor(Math.random() * ratings.length)],",
									"        special_features: Array.from({ length: Math.floor(Math.random() * specialFeaturesList.length) + 1 }, () =>",
									"            specialFeaturesList[Math.floor(Math.random() * specialFeaturesList.length)]",
									"        ),",
									"        fulltext: `Lorem ipsum ${Math.random().toString(36).substring(7)}`,",
									"    };",
									"}",
									"",
									"filmObject = generateRandomFilm()",
									"pm.globals.set(\"filmObject\", JSON.stringify(filmObject));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Film object structure is valid\", function () {",
									"    pm.expect(responseJSON.data).has.property('film_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('title').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('description').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('release_year').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('language_id').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_duration').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rental_rate').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('length').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('replacement_cost').that.is.a('number');",
									"    pm.expect(responseJSON.data).has.property('rating').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('last_update').that.is.a('string');",
									"    pm.expect(responseJSON.data).has.property('special_features').that.is.an('array');",
									"    pm.expect(responseJSON.data).has.property('fulltext').that.is.a('string');",
									"    pm.globals.set(\"inventoryFilmId\", pm.response.json().data.film_id);",
									"    pm.globals.set(\"filmTitle\", pm.response.json().data.title);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{filmObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/film",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"film"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /inventory",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"inventoryFilmId = pm.globals.get(\"inventoryFilmId\");",
									"",
									"let inventory = {",
									"    filmID: inventoryFilmId,",
									"    storeID: generateRandomNumber(1, 10),",
									"};",
									"",
									"pm.globals.set(\"inventoryObject\", JSON.stringify(inventory));",
									"",
									"function generateRandomNumber(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{inventoryObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/inventory",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"inventory"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "rental",
			"item": []
		},
		{
			"name": "payment",
			"item": []
		},
		{
			"name": "user",
			"item": [
				{
					"name": "GET /ping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.equal(200);",
									"});",
									"",
									"pm.test(\"Response contains the message 'pong'\", function () {",
									"    pm.expect(pm.response.json().message).to.equal('pong');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_url}}/ping",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateUser() {",
									"  return {",
									"    user_id: null,",
									"    email: `user${Math.floor(Math.random() * 1000)}@example.com`,",
									"    password: `password${Math.floor(Math.random() * 1000)}1!*Aa`,",
									"    last_update: new Date().toISOString(),",
									"    deleted_at: null",
									"  };",
									"}",
									"",
									"userObject = generateUser()",
									"console.log(userObject)",
									"pm.globals.set(\"userObject\", JSON.stringify(userObject));",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response data is existing\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"data\");",
									"});",
									"",
									"pm.test(\"Fields types matches expected ones\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property(\"user_id\").that.is.a(\"number\");",
									"    pm.expect(jsonData.data).to.have.property(\"email\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"password\").that.is.a(\"string\");",
									"    pm.expect(jsonData.data).to.have.property(\"last_update\").that.is.a(\"string\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{userObject}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/user",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"userObject = pm.globals.get(\"userObject\");",
									"userObject = JSON.parse(userObject)",
									"pm.globals.set(\"userObject.email\", userObject.email);",
									"pm.globals.set(\"userObject.password\", userObject.password);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.equal(\"successfully authorized\");",
									"    pm.expect(jsonData.token).to.be.a(\"string\");",
									"    pm.globals.set(\"authToken\", jsonData.token);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userObject.email}}\",\n    \"password\": \"{{userObject.password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_url}}/login",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /users",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{authToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{api_url}}/users?page=1&limit=10",
							"host": [
								"{{api_url}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "various",
			"item": [
				{
					"name": "cors",
					"item": [
						{
							"name": "GET /ping",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET request\", function () {",
											"    pm.expect(pm.response.code).to.be.equal(403);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"api_url\", \"http://localhost:8080\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Origin",
										"value": "http://localhost:3001",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{api_url}}/ping",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "files",
					"item": [
						{
							"name": "GET /file",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"filepath\", \"img/folder1/img.png\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/files/{{filepath}}",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"files",
										"{{filepath}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "development",
					"item": [
						{
							"name": "GET /test",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_url}}/test",
									"host": [
										"{{api_url}}"
									],
									"path": [
										"test"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}